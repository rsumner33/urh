# http://stackoverflow.com/questions/5041852/gnu-radio-file-format-for-the-recorded-samples

The file sink is just a dump of the data stream.
If the data stream content was simple bytes then the content of the file is straightforward.
If the data stream contained complex numbers then the file will contain a list of complex numbers
 where each complex number is given by two floats and each float by (usually) 4 bytes.

See the files gnuradio/gnuradio-core/src/lib/io/gr_file_sink.cc and gr_file_source.cc for the implementations
 of the gnuradio file reading and writing blocks.

You could also use python and gnuradio to convert the files into some other format.

from gnuradio import gr, blocks
import struct
# Assuming the data stream was complex numbers.
src = blocks.file_source(gr.sizeof_gr_complex, "test_1onoff")
snk = blocks.vector_sink_c()
tb = gr.top_block()
tb.connect(src, snk)
tb.run()
# The complex numbers are then accessible as a python list.
data = snk.data()

print(data[1:10])


# Ohne Gnuradio:

f = open("test_1onoff", "rb")
test = []
ta = test.append

c_prev = None

while True:
    buf = f.read(8)
    if not buf: break
    real, imag = struct.unpack("ff", buf)

    c = complex(real, imag)

    if c_prev is not None:
        tmp = c_prev.conjugate() * c

        if tmp.real != 0:
            arg = round(math.atan(tmp.imag/tmp.real) * 128) + 128
        else:
            arg = 0
        if arg >= 256:
            arg = 255
        elif arg < 0:
            arg = 0
        ta(int(arg))

    c_prev = c


f.close()


In tmp steht das demodulierte Ergebnis!